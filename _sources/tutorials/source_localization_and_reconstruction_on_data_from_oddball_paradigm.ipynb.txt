{
 "cells": [
  {
   "cell_type": "markdown",
   "source": [
    "Author: Julia Jurkowska"
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "ed8a8166dd34c963"
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Source localization and signal reconstruction - case study for oddball data"
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "83bba7a26693beba"
  },
  {
   "cell_type": "markdown",
   "source": [
    "### Introduction\n",
    "In this tutorial, we will learn how to **localize sources** from EEG data and **reconstruct signals** at those sources using **MVPURE-py**, an extension to MNE-Python.\n",
    "Source localization allows us to move beyond sensor-level analysis to estimate where in the brain the measured activity originates. Once sources are identified, we can reconstruct time series from vertices of interest for further analysis.\n",
    "\n",
    "We will cover the following steps:\n",
    "1. Reading all necessary data for the ``sample_subject``. You can download this dataset [here](https://figshare.com/articles/dataset/Sample_subject_data_/30102451?file=57853861).\n",
    "2. Computing data and noise covariance (R and N, respectively).\n",
    "3. Analysis of $RN^{-1}$ eigenvalues to guide the number of sources to localize and select an appropriate optimization parameter.\n",
    "4. Localizing the specified number of sources.\n",
    "5. Reconstructing source signals for vertices of interest and plotting the results.\n",
    "\n",
    "All steps will be repeated for two time frames: \"sensory\" (50-200 ms after stimuli) and \"cognitive\" (350-600 ms after stimuli).\n",
    "\n",
    "By the end of this tutorial, you will understand the basic workflow of source localization and signal reconstruction using the MVPURE-py package."
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "e1aa86bb8a404230"
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "import mne\n",
    "import os\n",
    "\n",
    "mne.viz.set_3d_backend('pyvistaqt')\n",
    "\n",
    "from mvpure_py import localizer, beamformer, viz, utils"
   ],
   "metadata": {
    "collapsed": false,
    "is_executing": true
   },
   "id": "cccde4627289188e"
  },
  {
   "cell_type": "markdown",
   "source": [
    "We will use data the ``sample_subject`` dataset [provided on Figshare](https://figshare.com/articles/dataset/Sample_subject_data_/30102451?file=57853861). If you wish to start from the beginning, please complete tutorial [Preprocessing data from oddball paradigm] first."
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "1e3d629de1266e9f"
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Reading /Volumes/UMK/oddball/subjects/sample_subject/_eeg/_pre/sample_subject_oddball-epo.fif ...\n",
      "    Found the data of interest:\n",
      "        t =    -199.22 ...     800.78 ms\n",
      "        0 CTF compensation matrices available\n",
      "Not setting metadata\n",
      "621 matching events found\n",
      "No baseline correction applied\n",
      "0 projection items activated\n",
      "EEG channel type selected for re-referencing\n",
      "Adding average EEG reference projection.\n",
      "1 projection items deactivated\n",
      "Average reference projection was added, but has not been applied yet. Use the apply_proj method to apply it.\n",
      "Created an SSP operator (subspace dimension = 1)\n",
      "1 projection items activated\n",
      "SSP projectors applied...\n"
     ]
    }
   ],
   "source": [
    "subject = \"sample_subject\"\n",
    "subjects_dir = \"subjects\"\n",
    "\n",
    "# Reading mne.Epochs\n",
    "epoched = mne.read_epochs(os.path.join(subjects_dir, subject, \"_eeg\", \"_pre\", f\"{subject}_oddball-epo.fif\"))\n",
    "forward_path = os.path.join(subjects_dir, subject, \"forward\", f\"{subject}_ico4-fwd.fif\")\n",
    "trans_path = os.path.join(subjects_dir, subject, \"_eeg\", \"trans\", f\"{subject}-fit_trans.fif\")\n",
    "\n",
    "# We will be using only data for 'target' stimuli\n",
    "target = epoched['target']\n",
    "sel_epoched = target.copy()\n",
    "sel_epoched = sel_epoched.set_eeg_reference('average', projection=True)\n",
    "sel_epoched.apply_proj()\n",
    "sel_evoked = sel_epoched.average()"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-09-11T21:10:03.008966Z",
     "start_time": "2025-09-11T21:10:02.807604Z"
    }
   },
   "id": "4ea0b442e5c104c3"
  },
  {
   "cell_type": "markdown",
   "source": [
    "To perform source localization, we need a **forward model** that links activity at source locations to the sensors (in this case EEG channels).\n",
    "Here, we load the forward solution and convert it to a fixed-orientation representation."
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "8b6a2f6dcde0c66e"
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Reading forward solution from /Volumes/UMK/oddball/subjects/sample_subject/forward/sample_subject_ico4-fwd.fif...\n",
      "    Reading a source space...\n",
      "    [done]\n",
      "    Reading a source space...\n",
      "    [done]\n",
      "    2 source spaces read\n",
      "    Desired named matrix (kind = 3523 (FIFF_MNE_FORWARD_SOLUTION_GRAD)) not available\n",
      "    Read EEG forward solution (5124 sources, 128 channels, free orientations)\n",
      "    Source spaces transformed to the forward solution coordinate frame\n",
      "    No patch info available. The standard source space normals will be employed in the rotation to the local surface coordinates....\n",
      "    Changing to fixed-orientation forward solution with surface-based source orientations...\n",
      "    [done]\n"
     ]
    }
   ],
   "source": [
    "# Reading mne.Forward \n",
    "fwd_vector = mne.read_forward_solution(forward_path)\n",
    "\n",
    "# Using fixed orientation in forward solution\n",
    "fwd = mne.convert_forward_solution(\n",
    "    fwd_vector,\n",
    "    surf_ori=True,\n",
    "    force_fixed=True,\n",
    "    use_cps=True\n",
    ")\n",
    "   \n",
    "# Leadfield matrix\n",
    "leadfield = fwd[\"sol\"][\"data\"]\n",
    "\n",
    "# Source positions extracted from forward model\n",
    "src = fwd[\"src\"]"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-09-11T21:10:03.113362Z",
     "start_time": "2025-09-11T21:10:03.009744Z"
    }
   },
   "id": "924bcc8322c22de1"
  },
  {
   "cell_type": "markdown",
   "source": [
    "### \"Sensory\" processing\n",
    "We will start with analysing processes in \"sensory\" time window.\n",
    "\n",
    "In an oddball paradigm, participants are presented with a sequence of frequent (standard) and infrequent (target) stimuli. The early neural responses to these target stimuli reflect **sensory processing** - the brain's initial registration of the incoming stimulus before higher-level cognitive mechanisms are engaged.\n",
    "We assume that sensory processing for given oddball paradigm occurs within the **50-200 ms** window after the stimuli. We will therefore compute the data covariance in this time range.\n",
    "To estimate the noise covariance, we use a baseline period **-200ms to 0 ms**, i.e., the interval before stimulus onset. This baseline is assumed to be free of stimulus-locked activity and provides reference for separating signal from noise."
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "c60a4a5cd016cc63"
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Created an SSP operator (subspace dimension = 1)\n",
      "    Setting small EEG eigenvalues to zero (without PCA)\n",
      "Reducing data rank from 128 -> 127\n",
      "Estimating covariance using EMPIRICAL\n",
      "Done.\n",
      "Number of samples used : 4056\n",
      "[done]\n",
      "    Created an SSP operator (subspace dimension = 1)\n",
      "    Setting small EEG eigenvalues to zero (without PCA)\n",
      "Reducing data rank from 128 -> 127\n",
      "Estimating covariance using EMPIRICAL\n",
      "Done.\n",
      "Number of samples used : 3042\n",
      "[done]\n"
     ]
    }
   ],
   "source": [
    "# Compute noise covariance\n",
    "noise_cov = mne.compute_covariance(\n",
    "    sel_epoched,\n",
    "    tmin=-0.2,\n",
    "    tmax=0,\n",
    "    method=\"empirical\"\n",
    ")\n",
    "\n",
    "# Compute data covariance for range corresponding to sensory processing\n",
    "data_cov_sen = mne.compute_covariance(\n",
    "    sel_epoched,\n",
    "    tmin=0.05,\n",
    "    tmax=0.2,\n",
    "    method=\"empirical\"\n",
    ")\n",
    "\n",
    "# Subset signal for given time range\n",
    "signal_sen = sel_evoked.crop(\n",
    "    tmin=0.05,\n",
    "    tmax=0.2\n",
    ")"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-09-11T21:10:03.257319Z",
     "start_time": "2025-09-11T21:10:03.121816Z"
    }
   },
   "id": "d1c9366013218b82"
  },
  {
   "cell_type": "markdown",
   "source": [
    "#### $RN^{-1}$ eigenvalues analysis\n",
    "Before attempting source localization, we need to decide **how many sources** to model and with what **rank**. Our proposition is to analyze the eigenvalues of the product of data covariance matrix $R$ and the inverse of the noise covariance matrix $N$. \n",
    "For a detailed theoretical background, see [PAPER]."
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "79c997845cc13d8c"
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 1200x600 with 1 Axes>",
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Suggested number of sources to localize: 62\n",
      "Suggested rank is: 42\n"
     ]
    }
   ],
   "source": [
    "sugg_n_sources, sugg_rank = localizer.suggest_n_sources_and_rank(\n",
    "    R=data_cov_sen.data,\n",
    "    N=noise_cov.data,\n",
    "    show_plot=True,\n",
    "    subject=subject,\n",
    "    s=14\n",
    ")"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-09-11T21:10:03.407036Z",
     "start_time": "2025-09-11T21:10:03.257192Z"
    }
   },
   "id": "37881de806459c46"
  },
  {
   "cell_type": "markdown",
   "source": [
    "#### Localize\n",
    "Based on the eigenvalue spectrium above, we will localize **62 sources** using **rank of 42**.\n",
    "We will use function ```mvpure_py.localizer.localize```, which performs the actual source localization.\n",
    "The main parameters are: \n",
    "- ``subject``: the subject ID (here: ``\"sample_subject\"``)\n",
    "- ``subjects_dir``: directory containing the subject folders.\n",
    "- ``localizer_to_use``: the algorithm variant. Here we choose ``\"mpz_mvp\"`` because it provides the highest spacial resolution. Other possible options include: ``\"mai\"``, ``\"mpz\"``, and ``\"mai_mvp\"``. For details, see [PAPER] or the function documentation.\n",
    "- ``n_sources_to_localize``: number of sources to localize. We will use the suggested number of sources from $RN^{-1}$ analysis.\n",
    "- ``R``: data covariance matrix\n",
    "- ``N``: noise covariance matrix\n",
    "- ```forward```: the ``mne.Forward`` object for this subject\n",
    "- ``r``: optimization rank parameter. We use the suggested value from the eigenvalues analysis, but it can be any integer smaller than ``number_of_sources_to_localize``."
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "70553011409ac322"
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001B[36mCalculating activity index for localizer: mpz_mvp\u001B[0m\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 5124/5124 [00:16<00:00, 302.37it/s]\n",
      "100%|██████████| 5124/5124 [00:16<00:00, 311.68it/s]\n",
      "100%|██████████| 5124/5124 [00:16<00:00, 311.65it/s]\n",
      "100%|██████████| 5124/5124 [00:16<00:00, 306.47it/s]\n",
      "100%|██████████| 5124/5124 [00:16<00:00, 309.97it/s]\n",
      "100%|██████████| 5124/5124 [00:16<00:00, 307.57it/s]\n",
      "100%|██████████| 5124/5124 [00:16<00:00, 303.06it/s]\n",
      "100%|██████████| 5124/5124 [00:16<00:00, 304.61it/s]\n",
      "100%|██████████| 5124/5124 [00:16<00:00, 303.29it/s]\n",
      "100%|██████████| 5124/5124 [00:16<00:00, 302.00it/s]\n",
      "100%|██████████| 5124/5124 [00:17<00:00, 301.35it/s]\n",
      "100%|██████████| 5124/5124 [00:17<00:00, 295.38it/s]\n",
      "100%|██████████| 5124/5124 [00:17<00:00, 294.21it/s]\n",
      "100%|██████████| 5124/5124 [00:17<00:00, 295.95it/s]\n",
      "100%|██████████| 5124/5124 [00:17<00:00, 293.16it/s]\n",
      "100%|██████████| 5124/5124 [00:17<00:00, 291.34it/s]\n",
      "100%|██████████| 5124/5124 [00:18<00:00, 282.57it/s]\n",
      "100%|██████████| 5124/5124 [00:17<00:00, 287.68it/s]\n",
      "100%|██████████| 5124/5124 [00:17<00:00, 285.50it/s]\n",
      "100%|██████████| 5124/5124 [00:19<00:00, 269.37it/s]\n",
      "100%|██████████| 5124/5124 [00:19<00:00, 268.82it/s]\n",
      "100%|██████████| 5124/5124 [00:18<00:00, 272.12it/s]\n",
      "100%|██████████| 5124/5124 [00:18<00:00, 275.31it/s]\n",
      "100%|██████████| 5124/5124 [00:18<00:00, 278.55it/s]\n",
      "100%|██████████| 5124/5124 [00:18<00:00, 274.03it/s]\n",
      "100%|██████████| 5124/5124 [00:18<00:00, 277.67it/s]\n",
      "100%|██████████| 5124/5124 [00:18<00:00, 272.22it/s]\n",
      "100%|██████████| 5124/5124 [00:18<00:00, 272.04it/s]\n",
      "100%|██████████| 5124/5124 [00:18<00:00, 271.20it/s]\n",
      "100%|██████████| 5124/5124 [00:19<00:00, 266.81it/s]\n",
      "100%|██████████| 5124/5124 [00:19<00:00, 266.88it/s]\n",
      "100%|██████████| 5124/5124 [00:19<00:00, 264.43it/s]\n",
      "100%|██████████| 5124/5124 [00:19<00:00, 264.33it/s]\n",
      "100%|██████████| 5124/5124 [00:19<00:00, 264.21it/s]\n",
      "100%|██████████| 5124/5124 [00:19<00:00, 260.33it/s]\n",
      "100%|██████████| 5124/5124 [00:22<00:00, 231.19it/s]\n",
      "100%|██████████| 5124/5124 [00:22<00:00, 226.51it/s]\n",
      "100%|██████████| 5124/5124 [00:22<00:00, 230.34it/s]\n",
      "100%|██████████| 5124/5124 [00:22<00:00, 231.64it/s]\n",
      "100%|██████████| 5124/5124 [00:23<00:00, 215.33it/s]\n",
      "100%|██████████| 5124/5124 [00:30<00:00, 168.64it/s]\n",
      "100%|██████████| 5124/5124 [00:28<00:00, 181.66it/s]\n",
      "100%|██████████| 5124/5124 [00:33<00:00, 152.17it/s]\n",
      "100%|██████████| 5124/5124 [00:34<00:00, 146.65it/s]\n",
      "100%|██████████| 5124/5124 [00:36<00:00, 141.51it/s]\n",
      "100%|██████████| 5124/5124 [00:38<00:00, 131.63it/s]\n",
      "100%|██████████| 5124/5124 [00:39<00:00, 129.57it/s]\n",
      "100%|██████████| 5124/5124 [00:36<00:00, 139.15it/s]\n",
      "100%|██████████| 5124/5124 [00:38<00:00, 133.81it/s]\n",
      "100%|██████████| 5124/5124 [00:38<00:00, 134.63it/s]\n",
      "100%|██████████| 5124/5124 [00:38<00:00, 133.06it/s]\n",
      "100%|██████████| 5124/5124 [00:39<00:00, 128.37it/s]\n",
      "100%|██████████| 5124/5124 [00:37<00:00, 136.43it/s]\n",
      "100%|██████████| 5124/5124 [00:37<00:00, 137.27it/s]\n",
      "100%|██████████| 5124/5124 [00:37<00:00, 136.45it/s]\n",
      "100%|██████████| 5124/5124 [00:38<00:00, 132.86it/s]\n",
      "100%|██████████| 5124/5124 [00:39<00:00, 129.94it/s]\n",
      "100%|██████████| 5124/5124 [00:39<00:00, 128.66it/s]\n",
      "100%|██████████| 5124/5124 [00:40<00:00, 126.19it/s]\n",
      "100%|██████████| 5124/5124 [00:41<00:00, 123.15it/s]\n",
      "100%|██████████| 5124/5124 [00:42<00:00, 121.05it/s]\n",
      "100%|██████████| 5124/5124 [00:45<00:00, 113.27it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Leadfield indices corresponding to localized sources: [31, 3557, 795, 1213, 1690, 2506, 2697, 2602, 1225, 83, 1966, 2085, 994, 2850, 2212, 4404, 4304, 4882, 608, 2522, 2325, 1876, 6, 3255, 1860, 3714, 4804, 2690, 84, 371, 2454, 3624, 5108, 1971, 265, 650, 992, 2727, 42, 4698, 329, 2574, 1258, 4002, 3368, 4920, 3, 33, 1405, 2887, 2333, 2771, 4604, 3333, 302, 306, 4422, 2597, 2580, 16, 4266, 3815]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "locs_sen = localizer.localize(\n",
    "    subject=subject,\n",
    "    subjects_dir=subjects_dir,\n",
    "    localizer_to_use=[\"mpz_mvp\"],\n",
    "    n_sources_to_localize=sugg_n_sources,\n",
    "    R=data_cov_sen.data,\n",
    "    N=noise_cov.data,\n",
    "    forward=fwd,\n",
    "    r=sugg_rank\n",
    ")"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-09-11T21:36:19.706360Z",
     "start_time": "2025-09-11T21:10:03.407450Z"
    }
   },
   "id": "a7ac386cf184320c"
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "outputs": [],
   "source": [
    "# Transform leadfield indices to vertices\n",
    "lh_vert_sen, lh_idx_sen, rh_vert_sen, rh_idx_sen = utils.transform_leadfield_indices_to_vertices(\n",
    "    lf_idx=locs_sen[\"sources\"],\n",
    "    src=src,\n",
    "    hemi=\"both\",\n",
    "    include_mapping=True\n",
    ")\n",
    "\n",
    "locs_sen.add_vertices_info(\n",
    "    lh_vertices=lh_vert_sen,\n",
    "    lh_indices=lh_idx_sen,\n",
    "    rh_vertices=rh_vert_sen,\n",
    "    rh_indices=rh_idx_sen\n",
    ")"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-09-11T21:36:19.713803Z",
     "start_time": "2025-09-11T21:36:19.712555Z"
    }
   },
   "id": "40a1929b9cc56c6b"
  },
  {
   "cell_type": "markdown",
   "source": [
    "Optionally, we can plot the localized sources on the brain surface:"
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "ec69bb6603ecf240"
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "outputs": [],
   "source": [
    "# locs_sen.plot_localized_sources()"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-09-11T21:36:19.718550Z",
     "start_time": "2025-09-11T21:36:19.713504Z"
    }
   },
   "id": "5cc5f1d4eda54f64"
  },
  {
   "cell_type": "markdown",
   "source": [
    "Here, the size and color of the markers indicate the order of localization:\n",
    "- large, red foci: sources localized earlier\n",
    "- small, white foci: sources localized later"
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "7109589ea45acf66"
  },
  {
   "cell_type": "markdown",
   "source": [
    "#### Reconstruct\n",
    "Now that we have localized sources of interest, the next sgtep is to **reconstruct their activity**.\n",
    "First, we restrict the original forward model to only include the localized sources. This reduces the forward solution to the relevant subspace:|"
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "f782df22e0978f93"
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "outputs": [],
   "source": [
    "# Subset mne.Forward\n",
    "new_fwd_sen = utils.subset_forward(\n",
    "    old_fwd=fwd,\n",
    "    localized=locs_sen,\n",
    "    hemi=\"both\"\n",
    ")"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-09-11T21:36:19.795935Z",
     "start_time": "2025-09-11T21:36:19.716622Z"
    }
   },
   "id": "eb99cd2d30ffe436"
  },
  {
   "cell_type": "markdown",
   "source": [
    "To compute the filters, we will use ``beamformer.make_filter``. \n",
    "\n",
    "This function works similarly to ``mne.beamformer.make_lcmv``, but with additional parameters specific to MVPURE.\n",
    "\n",
    "We provide these in a dictionary called ``mvpure_params``:\n",
    "- ``filter_type``: type of the beamformer to use. Options are: ``MVP_R`` and ``MVP_N``. In this case, we will use ``MVP_R`` as it is generalization of commonly used LCMV filter.\n",
    "-``filter_rank``: optimization rank parameter. For best performance, we use the same rank as in the localization step.\n",
    "\n",
    "Note: setting ``filter_rank=\"ful\"`` reduces the method to a standard LCMV filter.\n",
    "For theoretical details see [PAPER]."
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "7b72fd38ee20c861"
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "outputs": [],
   "source": [
    "# MVPURE filter parameters\n",
    "mvpure_params = {\n",
    "    'filter_type': 'MVP_R',\n",
    "    'filter_rank': sugg_rank\n",
    "}"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-09-11T21:36:19.808188Z",
     "start_time": "2025-09-11T21:36:19.737964Z"
    }
   },
   "id": "f92cd1accedf6dc0"
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Computing rank from covariance with rank=None\n",
      "    Using tolerance 4.4e-13 (2.2e-16 eps * 128 dim * 15  max singular value)\n",
      "    Estimated rank (eeg): 86\n",
      "    EEG: rank 86 computed from 128 data channels with 1 projector\n",
      "Computing rank from covariance with rank=None\n",
      "    Using tolerance 3.6e-13 (2.2e-16 eps * 128 dim * 13  max singular value)\n",
      "    Estimated rank (eeg): 86\n",
      "    EEG: rank 86 computed from 128 data channels with 1 projector\n",
      "Making MVP_R beamformer with rank {'eeg': 86} (note: MNE-Python rank)\n",
      "Computing inverse operator with 128 channels.\n",
      "    128 out of 128 channels remain after picking\n",
      "Selected 128 channels\n",
      "Whitening the forward solution.\n",
      "    Created an SSP operator (subspace dimension = 1)\n",
      "Computing rank from covariance with rank={'eeg': 86}\n",
      "    Setting small EEG eigenvalues to zero (without PCA)\n",
      "Creating the source covariance matrix\n",
      "Adjusting source covariance matrix.\n",
      "Computing beamformer filters for 62 sources\n",
      "MVP_R computation - in progress...\n",
      "Filter rank: 42\n",
      "Filter computation complete\n"
     ]
    }
   ],
   "source": [
    "# Build beamformer filter (similar to LCMV but with MVPURE options)\n",
    "filter_sen = beamformer.make_filter(\n",
    "    signal_sen.info,\n",
    "    new_fwd_sen,\n",
    "    data_cov_sen,\n",
    "    reg=0.05,\n",
    "    noise_cov=noise_cov,\n",
    "    pick_ori=None,  # not needed with fixed orientation forward\n",
    "    weight_norm=None,\n",
    "    rank=None,\n",
    "    mvpure_params=mvpure_params\n",
    ")"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-09-11T21:36:19.868241Z",
     "start_time": "2025-09-11T21:36:19.745153Z"
    }
   },
   "id": "faa8b0c9ebbd7671"
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "outputs": [],
   "source": [
    "# Apply filter to cropped evoked response\n",
    "stc_sen = beamformer.apply_filter(signal_sen, filter_sen)"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-09-11T21:36:19.887427Z",
     "start_time": "2025-09-11T21:36:19.866069Z"
    }
   },
   "id": "cdb609b79a691207"
  },
  {
   "cell_type": "markdown",
   "source": [
    "We then attach the resulting ``mne.SourceEstimate`` to the localized sources object, making it easier to visualize:"
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "d5d1a62c564e44a"
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "outputs": [],
   "source": [
    "# Add reconstructed source time course\n",
    "locs_sen.add_stc(stc_sen)"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-09-11T21:36:19.888613Z",
     "start_time": "2025-09-11T21:36:19.886324Z"
    }
   },
   "id": "7553c0bd5dcc339c"
  },
  {
   "cell_type": "markdown",
   "source": [
    "Finally, let's plot the localized sources with their reconstructed activity:"
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "664b440fc132f9f5"
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using control points [2.91332758e-09 3.43983961e-09 7.89233742e-09]\n"
     ]
    },
    {
     "data": {
      "text/plain": "<mne.viz._brain._brain.Brain at 0x1583aa270>"
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "viz.plot_sources_with_activity(\n",
    "    subject=subject,\n",
    "    stc=stc_sen,\n",
    "    background=\"white\"\n",
    ")"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-09-11T21:36:23.240780Z",
     "start_time": "2025-09-11T21:36:19.890610Z"
    }
   },
   "id": "c0dd032cd6283f1e"
  },
  {
   "cell_type": "markdown",
   "source": [
    "### \"Cognitive\" task\n",
    "After examing the early sensory responses, we now turn to the later cognitive stahe of processing in the oddball paradigm.\n",
    "In EEG, target stimuli typically evoke a P300 component — a positive deflection peaking around 300–600 ms after stimulus onset.\n",
    "This response is thought to reflect higher-level cognitive processes, such as attention allocation and stimulus evaluation, in contrast to the earlier sensory responses.\n",
    "\n",
    "For this dataset, we will therefore define the cognitive time window as **350–600 ms**.\n",
    "The pipeline remains the same as before:\n",
    "\n",
    "- Compute noise covariance (always from −200 to 0 ms).\n",
    "- Compute data covariance in the cognitive window (350–600 ms).\n",
    "- Subset the evoked signal to this time range."
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "ad22f685ecd15c6f"
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Created an SSP operator (subspace dimension = 1)\n",
      "    Setting small EEG eigenvalues to zero (without PCA)\n",
      "Reducing data rank from 128 -> 127\n",
      "Estimating covariance using EMPIRICAL\n",
      "Done.\n",
      "Number of samples used : 5070\n",
      "[done]\n"
     ]
    }
   ],
   "source": [
    "# Compute data covariance for range corresponding to sensory processing\n",
    "data_cov_task = mne.compute_covariance(\n",
    "    sel_epoched,\n",
    "    tmin=0.35,\n",
    "    tmax=0.6,\n",
    "    method=\"empirical\"\n",
    ")\n",
    "# There's no need to compute `noise_covariance` again as it is the same time interval\n",
    "\n",
    "sel_evoked = sel_epoched.average()\n",
    "\n",
    "# Subset signal for given time range\n",
    "signal_task = sel_evoked.crop(\n",
    "    tmin=0.35,\n",
    "    tmax=0.6\n",
    ")"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-09-11T21:36:23.360636Z",
     "start_time": "2025-09-11T21:36:23.246567Z"
    }
   },
   "id": "237a6b2afb47240e"
  },
  {
   "cell_type": "markdown",
   "source": [
    "From here, we can repeat the same steps as in the sensory section:\n",
    "- analyze eigenvalues of $RN^{-1}$,\n",
    "- localize sources,\n",
    "- reconstruct signals with MVPURE filters,\n",
    "- and finally visualize the results."
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "141d93859715c998"
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 1200x600 with 1 Axes>",
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Suggested number of sources to localize: 69\n",
      "Suggested rank is: 50\n"
     ]
    }
   ],
   "source": [
    "# Suggest number of sources to localize\n",
    "# and optimization parameter to use for both localization and reconstruction\n",
    "sugg_n_sources, sugg_rank = localizer.suggest_n_sources_and_rank(\n",
    "    R=data_cov_task.data,\n",
    "    N=noise_cov.data,\n",
    "    show_plot=True,\n",
    "    subject=subject,\n",
    "    s=14\n",
    ")"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-09-11T21:36:23.456621Z",
     "start_time": "2025-09-11T21:36:23.350760Z"
    }
   },
   "id": "9fc08f372dc5e18d"
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001B[36mCalculating activity index for localizer: mpz_mvp\u001B[0m\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 5124/5124 [00:22<00:00, 227.29it/s]\n",
      "100%|██████████| 5124/5124 [00:23<00:00, 219.92it/s]\n",
      "100%|██████████| 5124/5124 [00:24<00:00, 206.87it/s]\n",
      "100%|██████████| 5124/5124 [00:22<00:00, 230.55it/s]\n",
      "100%|██████████| 5124/5124 [00:21<00:00, 239.85it/s]\n",
      "100%|██████████| 5124/5124 [00:22<00:00, 232.09it/s]\n",
      "100%|██████████| 5124/5124 [00:21<00:00, 241.26it/s]\n",
      "100%|██████████| 5124/5124 [00:21<00:00, 234.91it/s]\n",
      "100%|██████████| 5124/5124 [00:21<00:00, 242.70it/s]\n",
      "100%|██████████| 5124/5124 [00:21<00:00, 243.91it/s]\n",
      "100%|██████████| 5124/5124 [00:21<00:00, 234.48it/s]\n",
      "100%|██████████| 5124/5124 [00:21<00:00, 241.44it/s]\n",
      "100%|██████████| 5124/5124 [00:21<00:00, 239.30it/s]\n",
      "100%|██████████| 5124/5124 [00:20<00:00, 248.39it/s]\n",
      "100%|██████████| 5124/5124 [00:20<00:00, 246.96it/s]\n",
      "100%|██████████| 5124/5124 [00:21<00:00, 243.96it/s]\n",
      "100%|██████████| 5124/5124 [00:20<00:00, 250.55it/s]\n",
      "100%|██████████| 5124/5124 [00:20<00:00, 252.83it/s]\n",
      "100%|██████████| 5124/5124 [00:20<00:00, 250.98it/s]\n",
      "100%|██████████| 5124/5124 [00:20<00:00, 250.03it/s]\n",
      "100%|██████████| 5124/5124 [00:20<00:00, 249.71it/s]\n",
      "100%|██████████| 5124/5124 [00:20<00:00, 252.17it/s]\n",
      "100%|██████████| 5124/5124 [00:20<00:00, 245.33it/s]\n",
      "100%|██████████| 5124/5124 [00:20<00:00, 252.36it/s]\n",
      "100%|██████████| 5124/5124 [00:20<00:00, 247.02it/s]\n",
      "100%|██████████| 5124/5124 [00:20<00:00, 251.69it/s]\n",
      "100%|██████████| 5124/5124 [00:23<00:00, 215.61it/s]\n",
      "100%|██████████| 5124/5124 [00:21<00:00, 234.60it/s]\n",
      "100%|██████████| 5124/5124 [00:21<00:00, 243.44it/s]\n",
      "100%|██████████| 5124/5124 [00:20<00:00, 245.63it/s]\n",
      "100%|██████████| 5124/5124 [00:21<00:00, 240.35it/s]\n",
      "100%|██████████| 5124/5124 [00:20<00:00, 247.86it/s]\n",
      "100%|██████████| 5124/5124 [00:20<00:00, 246.37it/s]\n",
      "100%|██████████| 5124/5124 [00:21<00:00, 243.88it/s]\n",
      "100%|██████████| 5124/5124 [00:21<00:00, 243.70it/s]\n",
      "100%|██████████| 5124/5124 [00:21<00:00, 243.27it/s]\n",
      "100%|██████████| 5124/5124 [00:21<00:00, 238.34it/s]\n",
      "100%|██████████| 5124/5124 [00:21<00:00, 239.47it/s]\n",
      "100%|██████████| 5124/5124 [00:21<00:00, 238.29it/s]\n",
      "100%|██████████| 5124/5124 [00:21<00:00, 242.33it/s]\n",
      "100%|██████████| 5124/5124 [00:21<00:00, 235.48it/s]\n",
      "100%|██████████| 5124/5124 [00:22<00:00, 228.16it/s]\n",
      "100%|██████████| 5124/5124 [00:22<00:00, 225.14it/s]\n",
      "100%|██████████| 5124/5124 [00:21<00:00, 233.82it/s]\n",
      "100%|██████████| 5124/5124 [00:24<00:00, 206.37it/s]\n",
      "100%|██████████| 5124/5124 [00:22<00:00, 227.36it/s]\n",
      "100%|██████████| 5124/5124 [00:22<00:00, 224.77it/s]\n",
      "100%|██████████| 5124/5124 [00:27<00:00, 185.77it/s]\n",
      "100%|██████████| 5124/5124 [00:22<00:00, 226.67it/s]\n",
      "100%|██████████| 5124/5124 [00:22<00:00, 231.82it/s]\n",
      "100%|██████████| 5124/5124 [00:30<00:00, 165.56it/s]\n",
      "100%|██████████| 5124/5124 [00:33<00:00, 154.77it/s]\n",
      "100%|██████████| 5124/5124 [00:31<00:00, 163.60it/s]\n",
      "100%|██████████| 5124/5124 [00:31<00:00, 165.03it/s]\n",
      "100%|██████████| 5124/5124 [00:31<00:00, 162.19it/s]\n",
      "100%|██████████| 5124/5124 [00:32<00:00, 159.90it/s]\n",
      "100%|██████████| 5124/5124 [00:33<00:00, 154.72it/s]\n",
      "100%|██████████| 5124/5124 [00:33<00:00, 151.46it/s]\n",
      "100%|██████████| 5124/5124 [00:34<00:00, 148.82it/s]\n",
      "100%|██████████| 5124/5124 [00:34<00:00, 148.85it/s]\n",
      "100%|██████████| 5124/5124 [00:35<00:00, 142.92it/s]\n",
      "100%|██████████| 5124/5124 [00:37<00:00, 137.03it/s]\n",
      "100%|██████████| 5124/5124 [00:39<00:00, 128.70it/s]\n",
      "100%|██████████| 5124/5124 [00:40<00:00, 127.15it/s]\n",
      "100%|██████████| 5124/5124 [00:41<00:00, 123.43it/s]\n",
      "100%|██████████| 5124/5124 [00:42<00:00, 120.62it/s]\n",
      "100%|██████████| 5124/5124 [00:42<00:00, 120.70it/s]\n",
      "100%|██████████| 5124/5124 [00:42<00:00, 119.88it/s]\n",
      "100%|██████████| 5124/5124 [00:43<00:00, 117.34it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Leadfield indices corresponding to localized sources: [1689, 1291, 1489, 2159, 4405, 5051, 2039, 800, 2020, 3224, 1792, 4998, 821, 1865, 3762, 4165, 2372, 2471, 4817, 495, 1755, 2548, 3334, 1572, 2322, 2008, 4379, 3733, 4426, 2527, 2230, 2362, 4774, 356, 2545, 902, 108, 3720, 211, 481, 64, 2740, 2303, 4641, 148, 170, 1460, 3454, 68, 4850, 1732, 641, 2310, 4678, 764, 669, 1376, 3730, 2856, 4542, 4680, 2932, 3896, 600, 3172, 2564, 2631, 4982, 1342]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "# Localize\n",
    "locs_task = localizer.localize(\n",
    "    subject=subject,\n",
    "    subjects_dir=subjects_dir,\n",
    "    localizer_to_use=[\"mpz_mvp\"],\n",
    "    n_sources_to_localize=sugg_n_sources,\n",
    "    R=data_cov_task.data,\n",
    "    N=noise_cov.data,\n",
    "    forward=fwd,\n",
    "    r=sugg_rank,\n",
    ")"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-09-11T22:05:58.982307Z",
     "start_time": "2025-09-11T21:36:23.455793Z"
    }
   },
   "id": "8000a464fcae6679"
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "outputs": [],
   "source": [
    "# Transform leadfield indices to vertices\n",
    "lh_vert_task, lh_idx_task, rh_vert_task, rh_idx_task = utils.transform_leadfield_indices_to_vertices(\n",
    "    lf_idx=locs_task[\"sources\"],\n",
    "    src=src,\n",
    "    hemi=\"both\",\n",
    "    include_mapping=True\n",
    ")\n",
    "\n",
    "locs_task.add_vertices_info(\n",
    "    lh_vertices=lh_vert_task,\n",
    "    lh_indices=lh_idx_task,\n",
    "    rh_vertices=rh_vert_task,\n",
    "    rh_indices=rh_idx_task\n",
    ")"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-09-11T22:05:59.014700Z",
     "start_time": "2025-09-11T22:05:58.985058Z"
    }
   },
   "id": "cd9cd7db0a043160"
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "outputs": [],
   "source": [
    "new_fwd_task = utils.subset_forward(\n",
    "    old_fwd=fwd,\n",
    "    localized=locs_task,\n",
    "    hemi=\"both\"\n",
    ")"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-09-11T22:05:59.022372Z",
     "start_time": "2025-09-11T22:05:58.986535Z"
    }
   },
   "id": "f068189124c7cd57"
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Computing rank from covariance with rank=None\n",
      "    Using tolerance 5.2e-13 (2.2e-16 eps * 128 dim * 18  max singular value)\n",
      "    Estimated rank (eeg): 86\n",
      "    EEG: rank 86 computed from 128 data channels with 1 projector\n",
      "Computing rank from covariance with rank=None\n",
      "    Using tolerance 3.6e-13 (2.2e-16 eps * 128 dim * 13  max singular value)\n",
      "    Estimated rank (eeg): 86\n",
      "    EEG: rank 86 computed from 128 data channels with 1 projector\n",
      "Making MVP_R beamformer with rank {'eeg': 86} (note: MNE-Python rank)\n",
      "Computing inverse operator with 128 channels.\n",
      "    128 out of 128 channels remain after picking\n",
      "Selected 128 channels\n",
      "Whitening the forward solution.\n",
      "    Created an SSP operator (subspace dimension = 1)\n",
      "Computing rank from covariance with rank={'eeg': 86}\n",
      "    Setting small EEG eigenvalues to zero (without PCA)\n",
      "Creating the source covariance matrix\n",
      "Adjusting source covariance matrix.\n",
      "Computing beamformer filters for 69 sources\n",
      "MVP_R computation - in progress...\n",
      "Filter rank: 50\n",
      "Filter computation complete\n"
     ]
    }
   ],
   "source": [
    "mcmv_params = {\n",
    "    'filter_rank': sugg_rank,\n",
    "    \"filter_type\": \"MVP_R\"\n",
    "}\n",
    "\n",
    "filter_task = beamformer.make_filter(\n",
    "    signal_task.info,\n",
    "    new_fwd_task,\n",
    "    data_cov_task,\n",
    "    reg=0.05,\n",
    "    noise_cov=noise_cov,\n",
    "    pick_ori=None,  # because scalar forward\n",
    "    weight_norm=None,\n",
    "    rank=None,\n",
    "    mvpure_params=mcmv_params\n",
    ")"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-09-11T22:05:59.086012Z",
     "start_time": "2025-09-11T22:05:59.002464Z"
    }
   },
   "id": "de8ad11b531964"
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using control points [2.84206626e-09 3.11743662e-09 5.08812233e-09]\n"
     ]
    },
    {
     "data": {
      "text/plain": "<mne.viz._brain._brain.Brain at 0x16c554cd0>"
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stc_task = beamformer.apply_filter(signal_task, filter_task)\n",
    "\n",
    "# Add source estimate to mvpure_py.Localized object\n",
    "locs_task.add_stc(stc_task)\n",
    "\n",
    "# Plot\n",
    "viz.plot_sources_with_activity(\n",
    "    subject=subject,\n",
    "    stc=stc_task,\n",
    ")"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-09-11T22:06:01.164271Z",
     "start_time": "2025-09-11T22:05:59.087331Z"
    }
   },
   "id": "80e9e875ebb67275"
  },
  {
   "cell_type": "markdown",
   "source": [],
   "metadata": {
    "collapsed": false
   },
   "id": "a4f53f92586fdefe"
  }
 ],
 "metadata": {
  "kernelspec": {
   "name": "mvpure-tools-venv",
   "language": "python",
   "display_name": "mvpure-tools-venv"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
